package com.lion.FinalProject_CarryOn_Anywhere.component

import androidx.compose.foundation.layout.RowScope
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Clear
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.input.ImeAction
import com.lion.FinalProject_CarryOn_Anywhere.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LikeLionSearchTopAppBar(
    textFieldValue: MutableState<String> = mutableStateOf(""),
    onSearchTextChange: (String) -> Unit,
    // ÏûÖÎ†•Í∞íÏù¥ Î≥ÄÍ≤ΩÎê† Îïå Ìò∏Ï∂úÎêòÎäî ÏΩúÎ∞±
    onTrailingIconClick: (() -> Unit)? = null,
    menuItems : @Composable RowScope.() -> Unit = {},
    onSearchClick: () -> Unit, // Ï∂îÍ∞Ä: Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§ÌñâÎê† ÏΩúÎ∞±
    // ÌÇ§Î≥¥Îìú ÏòµÏÖò
    keyboardOptions: KeyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Search),
    // Ïö∞Ï∏° ÎÅù ÏïÑÏù¥ÏΩò (ÌÖçÏä§Ìä∏ ÏÇ≠Ï†ú, ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥¥Í∏∞)
    trailingIconMode: LikeLionSearchTopAppBarTextFieldEndIconMode = LikeLionSearchTopAppBarTextFieldEndIconMode.NONE,
    onBackClick: () -> Unit = {}
) {
    // ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥¥Í∏∞ Ïó¨Î∂Ä
    var isShowingPasswordFlag by rememberSaveable { mutableStateOf(false) }

    TopAppBar(
        title = {
            TextField(
                value = textFieldValue.value,
                onValueChange = { onSearchTextChange(it) },
                placeholder = { Text("Í¥ÄÍ¥ëÏßÄ / ÎßõÏßë / ÏàôÏÜå Í≤ÄÏÉâ", color = Color.Gray) },
                keyboardOptions = keyboardOptions,
                keyboardActions = KeyboardActions(
                    onSearch = {
                        onSearchClick() // Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§Ìñâ
                    }
                ),
                singleLine = true,
                colors = TextFieldDefaults.colors(
                    focusedContainerColor = Color.Transparent, // Î∞∞Í≤Ω Ìà¨Î™Ö
                    unfocusedContainerColor = Color.Transparent, // Ìè¨Ïª§Ïä§ Ìï¥Ï†ú Ïãú Î∞∞Í≤Ω Ìà¨Î™Ö
                    cursorColor = Color.Black, // Ïª§ÏÑú ÏÉâÏÉÅ
                    focusedIndicatorColor = Color.Transparent, // Î∞ëÏ§Ñ Ï†úÍ±∞ (Ìè¨Ïª§Ïä§)
                    unfocusedIndicatorColor = Color.Transparent // Î∞ëÏ§Ñ Ï†úÍ±∞ (ÎπÑÌè¨Ïª§Ïä§)
                ),
                trailingIcon = {
                    when (trailingIconMode) {
                        // ÏïÑÏù¥ÏΩò ÏóÜÏùå
                        LikeLionSearchTopAppBarTextFieldEndIconMode.NONE -> {}
                        LikeLionSearchTopAppBarTextFieldEndIconMode.TEXT -> {
                            if (textFieldValue.value.isNotEmpty()) {
                                IconButton(
                                    onClick = {
                                        textFieldValue.value = ""
                                        onTrailingIconClick?.invoke()
                                    }
                                ) {
                                    Icon(
                                        imageVector = Icons.Filled.Clear,
                                        contentDescription = "Clear text"
                                    )
                                }
                            }
                        }
                        LikeLionSearchTopAppBarTextFieldEndIconMode.PASSWORD -> {
                            IconButton(
                                onClick = {
                                    isShowingPasswordFlag = !isShowingPasswordFlag
                                }
                            ) {
                                if (isShowingPasswordFlag) {
                                    // üëÅ ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥¥Ïù¥Í∏∞
                                    Icon(Icons.Filled.Visibility, contentDescription = "Hide password")
                                } else {
                                    // üëÅ‚Äçüó® ÎπÑÎ∞ÄÎ≤àÌò∏ Ïà®Í∏∞Í∏∞
                                    Icon(Icons.Filled.VisibilityOff, contentDescription = "Show password")
                                }
                            }
                        }
                    }
                },
                modifier = Modifier.fillMaxWidth()
            )
        },
        navigationIcon = {
            IconButton(onClick = { onBackClick() }) {
                Icon(
                    imageVector = ImageVector.vectorResource(R.drawable.arrow_back_24px),
                    contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞",
                    tint = Color.Black
                )
            }
        },
        actions = {
            menuItems()
        },
        colors = TopAppBarDefaults.topAppBarColors(
            containerColor = Color.White // Ïï±Î∞î Î∞∞Í≤Ω Ìù∞ÏÉâ
        )
    )
}

enum class LikeLionSearchTopAppBarTextFieldEndIconMode{
    NONE,
    TEXT,
    PASSWORD,
}